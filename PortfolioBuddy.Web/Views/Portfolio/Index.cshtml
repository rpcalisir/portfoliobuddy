@model PortfolioBuddy.Web.ViewModels.PortfolioIndexViewModel

@{
    ViewData["Title"] = "PortfolioBuddy";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

<div class="container py-3">
    <h2>@ViewData["Title"]</h2>

    <div class="card mb-3">
        <div class="card-body">
            <div class="row g-2">
                <div class="col-sm-8">
                    <input id="newName" class="form-control" placeholder='e.g., "BANK GOLD"' />
                </div>
                <div class="col-sm-4">
                    <button id="createBtn" class="btn btn-primary w-100">Create Investment</button>
                </div>
            </div>

            <!-- Hidden antiforgery token to be used by JS -->
            @Html.AntiForgeryToken()
        </div>
    </div>

    <div id="cards" class="row">
        @foreach (var inv in Model.Investments)
        {
            <partial name="~/Views/Shared/_InvestmentCard.cshtml" model="inv" />
        }
    </div>

</div>

@section Scripts {
    <script>
        async function getAntiForgeryToken() {
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenInput ? tokenInput.value : '';
        }

        // ----- 1. Create Investment -----
        document.getElementById('createBtn').addEventListener('click', async () => {
            const name = document.getElementById('newName').value.trim();
            if (!name) { alert('Enter a name'); return; }

            const token = await getAntiForgeryToken();
            const fd = new FormData();
            fd.append('name', name);

            try {
                const res = await fetch('/Investments/Create', {
                    method: 'POST',
                    headers: { 'RequestVerificationToken': token },
                    body: fd
                });

                if (!res.ok) {
                    const text = await res.text();
                    alert('Create failed: ' + text);
                    return;
                }

                // Insert the new card HTML at the end
                const html = await res.text();
                document.getElementById('cards').insertAdjacentHTML('beforeend', html);

                // Clear input
                document.getElementById('newName').value = '';
            } catch (err) {
                console.error('Error creating investment', err);
                alert('Unexpected error. Check console.');
            }
        });

        // ----- 2. Save Detail for dynamically added cards -----
        document.addEventListener('click', async e => {
            if (!e.target.classList.contains('save-detail')) return;

            const card = e.target.closest('[data-inv-id]');
            if (!card) return;

            const id = card.dataset.invId;
            const amount = card.querySelector('.amount')?.value;
            const unit = card.querySelector('.unit')?.value;
            const valueTl = card.querySelector('.value-tl')?.value;

            if (!id || !amount || !unit || !valueTl) {
                alert('Please fill amount, unit, and value.');
                return;
            }

            const token = await getAntiForgeryToken();
            const fd = new FormData();
            fd.append('investmentId', id);
            fd.append('amount', amount);
            fd.append('unit', unit);
            fd.append('valueInTl', valueTl);

            try {
                const res = await fetch('/Investments/AddDetail', {
                    method: 'POST',
                    headers: { 'RequestVerificationToken': token },
                    body: fd
                });

                if (!res.ok) {
                    const text = await res.text();
                    alert('Save failed: ' + text);
                    return;
                }

                // Replace the old card with the updated PartialView
                const html = await res.text();
                const tmp = document.createElement('div');
                tmp.innerHTML = html.trim();
                const newCard = tmp.firstElementChild;

                if (newCard) {
                    card.replaceWith(newCard);

                    // Optional feedback
                    const newBtn = newCard.querySelector('.save-detail');
                    if (newBtn) {
                        newBtn.textContent = 'Saved ✓';
                        setTimeout(() => newBtn.textContent = 'Save', 1200);
                    }
                }
            } catch (err) {
                console.error('Error saving investment detail', err);
                alert('Unexpected error. Check console.');
            }
        });
    </script>
}
